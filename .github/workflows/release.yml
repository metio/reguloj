# SPDX-FileCopyrightText: The reguloj Authors
# SPDX-License-Identifier: 0BSD

name: Perform Release
on:
  schedule:
    - cron:  35 7 * * TUE
  workflow_dispatch:
jobs:
  publish:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          java-version: 17
          java-package: jdk
          architecture: x64
          distribution: temurin
          server-id: ossrh
          server-username: MAVEN_CENTRAL_USERNAME
          server-password: MAVEN_CENTRAL_TOKEN
      - uses: actions/cache@v3
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Create Release Version
        id: release
        run: echo "version=$(date +'%Y.%-m.%-d')" >> $GITHUB_OUTPUT
      - name: Build Timestamp
        id: timestamp
        run: echo "iso8601=$(date --utc --iso-8601=seconds)" >> $GITHUB_OUTPUT
      - name: Count commits in last week
        id: commits
        run: echo "count=$(git rev-list --count HEAD --since='last Tuesday' -- src/main/java)" >> $GITHUB_OUTPUT
      - name: Set release version
        run: mvn --batch-mode --define newVersion=${{ steps.release.outputs.version }} --define generateBackupPoms=false versions:set
      - id: gpg
        name: GPG Key
        run: echo "${{ secrets.GPG_SECRET_KEY_BASE64 }}" | base64 --decode > $GITHUB_WORKSPACE/signing.key.asc
      - name: Publish to Maven Central
        if: steps.commits.outputs.count > 0
        run: >
          mvn
          --batch-mode
          --activate-profiles release
          --define pgp.secretkey=keyfile:$GITHUB_WORKSPACE/signing.key.asc
          --define pgp.passphrase=literal:${{ secrets.GPG_SECRET_KEY_PASSWORD }}
          --define project.build.outputTimestamp=${{ steps.timestamp.outputs.iso8601 }}
          verify deploy
        env:
          MAVEN_CENTRAL_USERNAME: ${{ secrets.MAVEN_CENTRAL_USERNAME }}
          MAVEN_CENTRAL_TOKEN: ${{ secrets.MAVEN_CENTRAL_TOKEN }}
          MAVEN_OPTS: "--add-opens=java.base/java.util=ALL-UNNAMED --add-opens=java.base/java.lang.reflect=ALL-UNNAMED --add-opens=java.base/java.text=ALL-UNNAMED --add-opens=java.desktop/java.awt.font=ALL-UNNAMED"
      - name: Create Release
        if: steps.commits.outputs.count > 0
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: ${{ steps.release.outputs.version }}
          name: ${{ steps.release.outputs.version }}
          commit: ${{ github.sha }}
          draft: false
          prerelease: false
          generateReleaseNotes: true
          body: |
            Include this project as a Maven dependency:
            ```xml
            <dependency>
              <groupId>wtf.metio.reguloj</groupId>
              <artifactId>reguloj</artifactId>
              <version>${{ steps.release.outputs.version }}</version>
            </dependency>
            ```

            Or like this in case you are using Gradle (Kotlin):
            ```kotlin
            dependencies {
                implementation("wtf.metio.reguloj:reguloj:${{ steps.release.outputs.version }}") {
                    because("we want to use a lightweight rule engine")
                }
            }
            ```
            Take a look the [information](https://search.maven.org/artifact/wtf.metio.reguloj/reguloj/${{ steps.release.outputs.version }}/jar) available at Maven Central for other build tools.
      - name: Send Mail
        if: steps.commits.outputs.count > 0
        uses: dawidd6/action-send-mail@v3.7.1
        with:
          server_address: ${{ secrets.MAIL_SERVER }}
          server_port: ${{ secrets.MAIL_PORT }}
          username: ${{ secrets.MAIL_USERNAME }}
          password: ${{ secrets.MAIL_PASSWORD }}
          subject: reguloj release ${{ steps.release.outputs.version }}
          body: See https://github.com/metio/reguloj/releases/tag/${{ steps.release.outputs.version }} for details.
          to: announcements@metio.groups.io
          from: ${{ secrets.MAIL_SENDER }}
      - id: matrix
        name: Send Matrix Message
        uses: s3krit/matrix-message-action@v0.0.3
        with:
          room_id: ${{ secrets.MATRIX_ROOM_ID }}
          access_token: ${{ secrets.MATRIX_ACCESS_TOKEN }}
          message: ${{ github.event.repository.name }} version [${{ steps.release.outputs.version }}](${{ steps.create_release.outputs.url }}) published
          server: matrix.org
